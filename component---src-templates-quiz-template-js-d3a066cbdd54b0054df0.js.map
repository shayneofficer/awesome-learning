{"version":3,"sources":["webpack:///./src/components/Quiz/quizUtilities.js","webpack:///./node_modules/@material-ui/core/esm/InputBase/utils.js","webpack:///./node_modules/@material-ui/core/esm/FormControl/FormControlContext.js","webpack:///./node_modules/@material-ui/core/esm/FormControl/FormControl.js","webpack:///./node_modules/@material-ui/core/esm/FormControl/useFormControl.js","webpack:///./node_modules/@material-ui/core/esm/FormLabel/FormLabel.js","webpack:///./node_modules/@material-ui/core/esm/FormControl/formControlState.js","webpack:///./node_modules/@material-ui/core/esm/FormControlLabel/FormControlLabel.js","webpack:///./src/components/Quiz/Question/Question.js","webpack:///./src/components/Quiz/Question/questionValidator.js","webpack:///./src/components/Quiz/Quiz.js","webpack:///./src/templates/quiz-template.js","webpack:///./src/components/shared/Page/Page.js"],"names":["getChoiceIndex","element","parseInt","getAttribute","hasValue","value","Array","isArray","length","FormControlContext","props","ref","children","classes","className","_props$color","color","_props$component","component","Component","_props$disabled","disabled","_props$error","error","_props$fullWidth","fullWidth","visuallyFocused","focused","_props$hiddenLabel","hiddenLabel","_props$margin","margin","_props$required","required","size","_props$variant","variant","other","_React$useState","initialAdornedStart","forEach","child","isMuiElement","input","startAdornment","adornedStart","setAdornedStart","_React$useState2","initialFilled","obj","SSR","arguments","undefined","defaultValue","isFilled","filled","setFilled","_React$useState3","_focused","setFocused","onFilled","childContext","onBlur","onEmpty","onFocus","registerEffect","Provider","root","concat","capitalize","withStyles","display","flexDirection","position","minWidth","padding","border","verticalAlign","marginNormal","marginTop","marginBottom","marginDense","width","name","fcs","_ref","states","muiFormControl","reduce","acc","state","formControlState","asterisk","theme","palette","text","secondary","typography","body1","lineHeight","primary","main","colorSecondary","checked","control","disabledProp","label","inputRef","_props$labelPlacement","labelPlacement","onChange","controlProps","key","Typography","alignItems","cursor","WebkitTapHighlightColor","marginLeft","marginRight","labelPlacementStart","labelPlacementTop","labelPlacementBottom","useStyles","makeStyles","question","dark","titleWrapper","backgroundColor","minHeight","title","spacing","contrastText","explanation","info","choices","Question","handleInputChange","questionId","questionIndex","shouldShowCorrectChoice","useTheme","highlightColor","defaultColor","isCorrect","success","correctColor","incorrectColor","Box","style","codeSnippet","map","choice","choiceIndex","choiceId","formatChoiceId","px","data-choice-index","data-question-index","id","type","questionValidator","correctChoices","selectedChoices","listOfChoices","isSelected","push","correctChoiceValues","includes","every","sectionTitle","paddingTop","linkTitle","textTransform","textDecoration","paragraphContainer","paddingBottom","Quiz","quiz","slug","initialState","questions","useState","updateQuizState","fieldset","currentTarget","target","currentQuestion","selectedIndices","from","querySelectorAll","index","updatedQuestions","m","maxWidth","breakpoints","values","lg","Link","to","description","formatQuestionId","questionTitle","my","Button","onClick","window","scrollTo","validatedQuestions","QuizTemplate","data","markdownRemark","frontmatter","quizTitle","courseDescription","fields","preReadQuiz","Layout","Page","defaultProps"],"mappings":"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","file":"component---src-templates-quiz-template-js-d3a066cbdd54b0054df0.js","sourcesContent":["// Formats the input ID for one question choice\nexport const formatChoiceId = (questionId, choiceIndex) =>\n  `${questionId}_choice${choiceIndex}`;\n\n// Formats the question ID for one question\nexport const formatQuestionId = (questionIndex) => `question${questionIndex}`;\n\n// Gets the numeric index of this choice\nexport const getChoiceIndex = (element) =>\n  parseInt(element.getAttribute('data-choice-index'), 10);\n\n// Gets the numeric index of this choice\nexport const getQuestionIndex = (element) =>\n  parseInt(element.getAttribute('data-question-index'), 10);\n","// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nexport function hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0);\n} // Determine if field is empty or filled.\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\n\nexport function isFilled(obj) {\n  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n} // Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\n\nexport function isAdornedStart(obj) {\n  return obj.startAdornment;\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar FormControlContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\n\nexport function useFormControl() {\n  return React.useContext(FormControlContext);\n}\nexport default FormControlContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\n\nvar FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      visuallyFocused = props.focused,\n      _props$hiddenLabel = props.hiddenLabel,\n      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,\n      _props$margin = props.margin,\n      margin = _props$margin === void 0 ? 'none' : _props$margin,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      size = props.size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  var _React$useState = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        var input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  }),\n      adornedStart = _React$useState[0],\n      setAdornedStart = _React$useState[1];\n\n  var _React$useState2 = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  }),\n      filled = _React$useState2[0],\n      setFilled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  var registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var onFilled = React.useCallback(function () {\n    setFilled(true);\n  }, []);\n  var onEmpty = React.useCallback(function () {\n    setFilled(false);\n  }, []);\n  var childContext = {\n    adornedStart: adornedStart,\n    setAdornedStart: setAdornedStart,\n    color: color,\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onEmpty: onEmpty,\n    onFilled: onFilled,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    variant: variant\n  };\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[\"margin\".concat(capitalize(margin))], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.body1, {\n      lineHeight: 1,\n      padding: 0,\n      '&$focused': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused': {\n        color: theme.palette.secondary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Styles applied to the asterisk element. */\n    asterisk: {\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }\n  };\n};\nvar FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'label' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      required = props.required,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);","import \"core-js/modules/es.array.reduce.js\";\nexport default function formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      muiFormControl = _ref.muiFormControl;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { useFormControl } from '../FormControl';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      WebkitTapHighlightColor: 'transparent',\n      marginLeft: -11,\n      marginRight: 16,\n      // used for row presentation of radio/checkbox\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"start\"`. */\n    labelPlacementStart: {\n      flexDirection: 'row-reverse',\n      marginLeft: 16,\n      // used for row presentation of radio/checkbox\n      marginRight: -11\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"top\"`. */\n    labelPlacementTop: {\n      flexDirection: 'column-reverse',\n      marginLeft: 16\n    },\n\n    /* Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n    labelPlacementBottom: {\n      flexDirection: 'column',\n      marginLeft: 16\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the label's Typography component. */\n    label: {\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      }\n    }\n  };\n};\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\nvar FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {\n  var checked = props.checked,\n      classes = props.classes,\n      className = props.className,\n      control = props.control,\n      disabledProp = props.disabled,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$labelPlacement = props.labelPlacement,\n      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,\n      name = props.name,\n      onChange = props.onChange,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"checked\", \"classes\", \"className\", \"control\", \"disabled\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"value\"]);\n\n  var muiFormControl = useFormControl();\n  var disabled = disabledProp;\n\n  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {\n    disabled = control.props.disabled;\n  }\n\n  if (typeof disabled === 'undefined' && muiFormControl) {\n    disabled = muiFormControl.disabled;\n  }\n\n  var controlProps = {\n    disabled: disabled\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"label\", _extends({\n    className: clsx(classes.root, className, labelPlacement !== 'end' && classes[\"labelPlacement\".concat(capitalize(labelPlacement))], disabled && classes.disabled),\n    ref: ref\n  }, other), /*#__PURE__*/React.cloneElement(control, controlProps), /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\",\n    className: clsx(classes.label, disabled && classes.disabled)\n  }, label));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Typography,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  Box,\n} from '@material-ui/core';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport {formatChoiceId} from '../quizUtilities';\n\nconst useStyles = makeStyles((theme) => ({\n  question: {\n    color: theme.palette.primary.dark,\n    width: '100%',\n  },\n  titleWrapper: {\n    backgroundColor: 'var(--background-color)',\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: '45px',\n  },\n  title: {\n    padding: theme.spacing(2),\n    color: theme.palette.secondary.contrastText,\n  },\n  explanation: {\n    backgroundColor: theme.palette.info.main,\n    color: theme.palette.info.contrastText,\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  choices: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n// Color to highlight the question if the question is unanswered, correct, or incorrect\nconst defaultColor = (theme) => ({\n  '--background-color': theme.palette.secondary.main,\n});\n\nconst correctColor = (theme) => ({\n  '--background-color': theme.palette.success.main,\n});\n\nconst incorrectColor = (theme) => ({\n  '--background-color': theme.palette.error.main,\n});\n\nconst Question = ({\n  handleInputChange,\n  question,\n  questionId,\n  questionIndex,\n  shouldShowCorrectChoice,\n  title,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  let highlightColor = defaultColor(theme);\n  if (shouldShowCorrectChoice) {\n    highlightColor = question.isCorrect\n      ? correctColor(theme)\n      : incorrectColor(theme);\n  }\n  return (\n    <FormControl\n      component=\"fieldset\"\n      onChange={handleInputChange}\n      className={classes.question}\n    >\n      <Box className={classes.titleWrapper} style={highlightColor}>\n        <FormLabel component=\"legend\" className={classes.title}>\n          {title}\n        </FormLabel>\n      </Box>\n      {shouldShowCorrectChoice && question.explanation && (\n        <Typography variant=\"body1\" className={classes.explanation}>\n          <b>Explanation: </b>\n          {question.explanation}\n        </Typography>\n      )}\n      {question.codeSnippet && <pre>{question.codeSnippet}</pre>}\n      {question.choices.map((choice, choiceIndex) => {\n        const choiceId = formatChoiceId(questionId, choiceIndex);\n        return (\n          <FormControlLabel\n            value={choice.value}\n            control={\n              <Box px={4}>\n                <input\n                  data-choice-index={choiceIndex}\n                  data-question-index={questionIndex}\n                  id={choiceId}\n                  key={choiceIndex}\n                  name={questionId}\n                  type={question.type}\n                  value={choice.value}\n                />\n              </Box>\n            }\n            label={<Typography variant=\"body1\">{choice.value}</Typography>}\n            key={choiceId}\n            className={classes.choices}\n          />\n        );\n      })}\n    </FormControl>\n  );\n};\n\nQuestion.propTypes = {\n  handleInputChange: PropTypes.func,\n  question: PropTypes.object.isRequired,\n  questionId: PropTypes.string.isRequired,\n  questionIndex: PropTypes.number.isRequired,\n  shouldShowCorrectChoice: PropTypes.bool,\n  title: PropTypes.string,\n};\n\nexport default Question;\n","export default function questionValidator(question) {\n  const {choices, correctChoices} = question;\n  // Get the user-selected choice values\n  const selectedChoices = choices.reduce((listOfChoices, choice) => {\n    if (choice.isSelected) {\n      listOfChoices.push(choice.value);\n    }\n    return listOfChoices;\n  }, []);\n\n  // Get the values of the correct choices\n  const correctChoiceValues = choices.reduce(\n    (listOfChoices, choice, choiceIndex) => {\n      if (correctChoices.includes(choiceIndex)) {\n        listOfChoices.push(choice.value);\n      }\n      return listOfChoices;\n    },\n    []\n  );\n\n  // If there is a discrepancy in the number of choices, versus the number of correct choices,\n  // mark the question as incorrect and return early\n  if (selectedChoices.length !== correctChoices.length) {\n    question.isCorrect = false;\n    return question;\n  }\n\n  // If the length is the same, compare each value to verify that every correct choice\n  // is in the list of user-selected choices\n  question.isCorrect = correctChoiceValues.every((choice) =>\n    selectedChoices.includes(choice)\n  );\n  return question;\n}\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {Button, Typography, Box} from '@material-ui/core';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport {Link} from 'gatsby';\nimport {\n  formatQuestionId,\n  getChoiceIndex,\n  getQuestionIndex,\n} from './quizUtilities';\nimport Question from './Question';\nimport questionValidator from './Question/questionValidator';\n\nconst useStyles = makeStyles((theme) => ({\n  sectionTitle: {\n    paddingTop: theme.spacing(3),\n  },\n  linkTitle: {\n    textTransform: 'uppercase',\n    textDecoration: 'underline',\n    '&:hover, &:focus': {\n      textDecoration: 'none',\n    },\n  },\n  paragraphContainer: {\n    paddingBottom: theme.spacing(4),\n  },\n}));\n\nconst Quiz = ({quiz, slug, title}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const initialState = {\n    shouldShowCorrectChoice: false,\n    questions: quiz.questions,\n  };\n  // Hooks to maintain state within this Quiz\n  const [{shouldShowCorrectChoice, questions}, updateQuizState] = useState(\n    initialState\n  );\n\n  // Handles changing of a question; update state based on which choice(s) the user has selected\n  const handleInputChange = ({currentTarget: fieldset, target}) => {\n    // Get the current question and mark the appropriate choices as being selected by the user\n    const questionIndex = getQuestionIndex(target);\n    const currentQuestion = questions[questionIndex];\n    switch (currentQuestion.type) {\n      case 'checkbox': {\n        // Gets the indices of selected checkboxes\n        const selectedIndices = Array.from(\n          fieldset.querySelectorAll('input:checked')\n        ).map(getChoiceIndex);\n\n        // Updates every choice based on whether or not it is in the list of user-selected choices\n        currentQuestion.choices.forEach((choice, index) => {\n          choice.isSelected = selectedIndices.includes(index);\n        });\n        break;\n      }\n      case 'radio': {\n        // Set the selection status of all question choices based on\n        // whether or not the user has selected them\n        const choiceIndex = getChoiceIndex(target);\n        currentQuestion.choices.forEach((choice, index) => {\n          choice.isSelected = choiceIndex === index;\n        });\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n    // Clone the questions array to force a state change\n    const updatedQuestions = Array.from(questions);\n    // Update the state of the quiz\n    updateQuizState({\n      shouldShowCorrectChoice: false,\n      questions: updatedQuestions,\n    });\n  };\n\n  // Handles the submission of the quiz\n  const handleQuizSubmit = () => {\n    // Scroll to the top of the page\n    window.scrollTo(0, 0);\n    // Validate every question and update the state of the quiz\n    const validatedQuestions = questions.map(questionValidator);\n    updateQuizState({\n      shouldShowCorrectChoice: true,\n      questions: validatedQuestions,\n    });\n  };\n\n  return (\n    <Box m=\"auto\" maxWidth={theme.breakpoints.values.lg}>\n      <Typography\n        variant=\"h4\"\n        color=\"secondary\"\n        component={Link}\n        to={slug}\n        className={classes.linkTitle}\n      >\n        Back to Lesson\n      </Typography>\n      <Typography variant=\"h1\" className={classes.sectionTitle}>\n        {title} Pre-Read Quiz\n      </Typography>\n      <Box>\n        {quiz.description && (\n          <Typography variant=\"body1\" className={classes.sectionTitle}>\n            {quiz.description}\n          </Typography>\n        )}\n        {/* Iterate over all questions in this Quiz */}\n        {questions.map((question, questionIndex) => {\n          const questionId = formatQuestionId(questionIndex);\n          const questionTitle = `Q${questionIndex + 1}: ${\n            question.description\n          }`;\n          return (\n            <Box my={4} key={questionId}>\n              <Question\n                handleInputChange={handleInputChange}\n                question={question}\n                questionId={questionId}\n                questionIndex={questionIndex}\n                shouldShowCorrectChoice={shouldShowCorrectChoice}\n                title={questionTitle}\n              />\n            </Box>\n          );\n        })}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={handleQuizSubmit}\n        >\n          Submit Quiz\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nQuiz.propTypes = {\n  quiz: PropTypes.shape({\n    questions: PropTypes.array,\n    description: PropTypes.node,\n  }).isRequired,\n  slug: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {graphql} from 'gatsby';\nimport {Typography} from '@material-ui/core';\nimport Layout from '../components/shared/Layout';\nimport Page from '../components/shared/Page';\nimport Quiz from '../components/Quiz';\n\nconst QuizTemplate = ({data}) => {\n  const {\n    title: quizTitle,\n    description: courseDescription,\n  } = data.markdownRemark.frontmatter;\n\n  const {slug} = data.markdownRemark.fields;\n  const {title} = data.markdownRemark.frontmatter;\n\n  const {\n    markdownRemark: {\n      frontmatter: {preReadQuiz},\n    },\n  } = data;\n\n  return (\n    <Layout description={courseDescription} title={quizTitle} slug={slug}>\n      <Page>\n        {preReadQuiz === null ? (\n          <Typography variant=\"h1\" color=\"textPrimary\">\n            A quiz for this lesson is not ready yet!\n          </Typography>\n        ) : (\n          <Quiz quiz={preReadQuiz} slug={slug} title={title} />\n        )}\n      </Page>\n    </Layout>\n  );\n};\n\nQuizTemplate.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        description: PropTypes.string,\n        preReadQuiz: PropTypes.object,\n      }),\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n    }),\n  }).isRequired,\n};\n\nexport const query = graphql`\n  query QuizBySlug($slug: String!) {\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      html\n      fields {\n        slug\n        tagSlugs\n      }\n      frontmatter {\n        title\n        preReadQuiz {\n          description\n          questions {\n            codeSnippet\n            correctChoices\n            description\n            explanation\n            type\n            choices {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default QuizTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Page.scss';\n\nconst Page = ({children}) => (\n  <div className=\"Page\">\n    <div className=\"Page-inner\">\n      <div className=\"Page-body\">{children}</div>\n    </div>\n  </div>\n);\n\nPage.propTypes = {\n  children: PropTypes.node,\n};\n\nPage.defaultProps = {\n  children: null,\n};\n\nexport default Page;\n"],"sourceRoot":""}